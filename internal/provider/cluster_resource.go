// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	zilliz "github.com/zilliztech/terraform-provider-zillizcloud/client"
	util "github.com/zilliztech/terraform-provider-zillizcloud/client/retry"
)

const (
	defaultClusterCreateTimeout time.Duration = 8 * time.Minute
	defaultClusterUpdateTimeout time.Duration = 5 * time.Minute
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ClusterResource{}
var _ resource.ResourceWithConfigure = &ClusterResource{}
var _ resource.ResourceWithImportState = &ClusterResource{}

func NewClusterResource() resource.Resource {
	return &ClusterResource{}
}

// ClusterResource defines the resource implementation.
type ClusterResource struct {
	client *zilliz.Client
	store  ClusterStore
}

func (r *ClusterResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_cluster"
}

func (r *ClusterResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Cluster resource. If 'plan', 'cu_size' and 'cu_type' are not specified, then a free cluster is created.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "Cluster identifier",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"cluster_name": schema.StringAttribute{
				MarkdownDescription: "The name of the cluster to be created. It is a string of no more than 32 characters.",
				Required:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"project_id": schema.StringAttribute{
				MarkdownDescription: "The ID of the project where the cluster is to be created.",
				Required:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"plan": schema.StringAttribute{
				MarkdownDescription: "The plan tier of the Zilliz Cloud service. Available options are Serverless, Standard and Enterprise.",
				Required:            true,
			},
			"cu_size": schema.Int64Attribute{
				MarkdownDescription: "The size of the CU to be used for the created cluster. It is an integer from 1 to 256.",
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.UseStateForUnknown(),
				},
				Validators: []validator.Int64{
					int64validator.AlsoRequires(
						path.MatchRelative().AtParent().AtName("plan"),
						path.MatchRelative().AtParent().AtName("cu_type"),
					),
				},
			},
			"cu_type": schema.StringAttribute{
				MarkdownDescription: "The type of the CU used for the Zilliz Cloud cluster to be created. A compute unit (CU) is the physical resource unit for cluster deployment. Different CU types comprise varying combinations of CPU, memory, and storage. Available options are Performance-optimized, Capacity-optimized, and Cost-optimized. This parameter defaults to Performance-optimized. The value defaults to Performance-optimized.",
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.AlsoRequires(
						path.MatchRelative().AtParent().AtName("cu_size"),
						path.MatchRelative().AtParent().AtName("plan"),
					),
				},
			},
			"username": schema.StringAttribute{
				MarkdownDescription: "The name of the cluster user generated by default.",
				Computed:            true,
			},
			"password": schema.StringAttribute{
				MarkdownDescription: "The password of the cluster user generated by default. It will not be displayed again, so note it down and securely store it.",
				Computed:            true,
				Sensitive:           true,
			},
			"prompt": schema.StringAttribute{
				MarkdownDescription: "The statement indicating that this operation succeeds.",
				Computed:            true,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: "An optional description about the cluster.",
				Computed:            true,
			},
			"region_id": schema.StringAttribute{
				MarkdownDescription: "The ID of the region where the cluster exists.",
				Optional:            true,
				Computed:            true,
			},
			"cluster_type": schema.StringAttribute{
				MarkdownDescription: "[Deprecated] The type of CU associated with the cluster. Use 'cu_type' instead. Possible values are Performance-optimized and Capacity-optimized.",
				Computed:            true,
				Optional:            true,
				DeprecationMessage:  "This attribute is deprecated and will be removed in a future version. Please use 'cu_type' instead.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"status": schema.StringAttribute{
				MarkdownDescription: "The current status of the cluster. Possible values are INITIALIZING, RUNNING, SUSPENDING, and RESUMING.",
				Computed:            true,
			},
			"connect_address": schema.StringAttribute{
				MarkdownDescription: "The public endpoint of the cluster. You can connect to the cluster using this endpoint from the public network.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"private_link_address": schema.StringAttribute{
				MarkdownDescription: "The private endpoint of the cluster. You can set up a private link to allow your VPS in the same cloud region to access your cluster.",
				Computed:            true,
			},
			"create_time": schema.StringAttribute{
				MarkdownDescription: "The time at which the cluster has been created.",
				Computed:            true,
			},
		},
		Blocks: map[string]schema.Block{
			"timeouts": timeouts.Block(ctx,
				timeouts.Opts{
					Create: true,
					CreateDescription: `Timeout defaults to 5 mins. Accepts a string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) ` +
						`consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are ` +
						`"s" (seconds), "m" (minutes), "h" (hours).`,
					Update: true,
					UpdateDescription: `Timeout defaults to 5 mins. Accepts a string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) ` +
						`consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are ` +
						`"s" (seconds), "m" (minutes), "h" (hours).`,
				},
			),
		},
	}
}

func (r *ClusterResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*zilliz.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *http.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
	r.store = &ClusterStoreImpl{client: client}
}

func CloneClient(ctx context.Context, client *zilliz.Client, data *ClusterResourceModel) (*zilliz.Client, error) {
	var regionId = client.RegionId

	if data.RegionId.ValueString() != "" {
		regionId = data.RegionId.ValueString()
	}

	ctx = tflog.SetField(ctx, "RegionID", regionId)
	tflog.Info(ctx, "Clone Client...")

	return client.Clone(zilliz.WithCloudRegionId(regionId))
}

func (r *ClusterResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "Create Cluster...")
	var data ClusterResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	checkPlan := func(data ClusterResourceModel) (bool, error) {

		if data.Plan.IsNull() {
			return true, nil
		}

		switch zilliz.Plan(data.Plan.ValueString()) {
		case zilliz.StandardPlan, zilliz.EnterprisePlan, zilliz.FreePlan, zilliz.ServerlessPlan:
			return true, nil
		default:
			return false, fmt.Errorf("invalid plan: %s", data.Plan.ValueString())
		}

	}

	if _, err := checkPlan(data); err != nil {
		resp.Diagnostics.AddError("Invalid plan", err.Error())
		return
	}

	var err error

	cluster, err := r.store.Create(ctx, &data)
	if err != nil {
		resp.Diagnostics.AddError("Failed to create cluster", err.Error())
		return
	}

	data.Username = cluster.Username
	data.Password = cluster.Password
	data.Prompt = cluster.Prompt

	// Wait for cluster to be RUNNING
	// Create() is passed a default timeout to use if no value
	// has been supplied in the Terraform configuration.
	createTimeout, diags := data.Timeouts.Create(ctx, defaultClusterCreateTimeout)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(r.waitForStatus(ctx, createTimeout, cluster.ClusterId.ValueString(), "RUNNING")...)
	if resp.Diagnostics.HasError() {
		return
	}

	cluster, err = r.store.Get(ctx, cluster.ClusterId.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Failed to get cluster", err.Error())
		return
	}

	data.populate(cluster)

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ClusterResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	tflog.Info(ctx, "Read Cluster...")
	var state ClusterResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	cluster, err := r.store.Get(ctx, state.ClusterId.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Failed to get cluster", err.Error())
		return
	}

	state.populate(cluster)
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (r *ClusterResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	tflog.Info(ctx, "Update Cluster...")

	var plan ClusterResourceModel
	var state ClusterResourceModel

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read Terraform state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	if plan.CuSize.ValueInt64() != state.CuSize.ValueInt64() {
		err := r.store.UpgradeCuSize(ctx, state.ClusterId.ValueString(), int(plan.CuSize.ValueInt64()))
		if err != nil {
			resp.Diagnostics.AddError("Failed to modify cluster", err.Error())
			return
		}
	}

	// Wait for cluster to be RUNNING
	// Update() is passed a default timeout to use if no value
	// has been supplied in the Terraform configuration.
	updateTimeout, diags := plan.Timeouts.Update(ctx, defaultClusterUpdateTimeout)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(r.waitForStatus(ctx, updateTimeout, state.ClusterId.ValueString(), "RUNNING")...)
	if resp.Diagnostics.HasError() {
		return
	}

	cluster, err := r.store.Get(ctx, state.ClusterId.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Failed to get cluster", err.Error())
		return
	}

	state.populate(cluster)
	state.Timeouts = plan.Timeouts

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (r *ClusterResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	tflog.Info(ctx, "Delete Cluster...")
	var data ClusterResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.store.Delete(ctx, data.ClusterId.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Failed to drop cluster", err.Error())
		return
	}
}

func (r *ClusterResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	idParts := strings.Split(req.ID, ",")

	if len(idParts) != 2 || idParts[0] == "" || idParts[1] == "" {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			fmt.Sprintf("Expected import identifier with format: clusterId,regionId. Got: %q", req.ID),
		)
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), idParts[0])...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("region_id"), idParts[1])...)
}

func (r *ClusterResource) waitForStatus(ctx context.Context, timeout time.Duration, clusterId string, status string) diag.Diagnostics {
	var diags diag.Diagnostics

	_, err := util.Poll(ctx, timeout, func() (*string, *util.Err) {
		cluster, err := r.client.DescribeCluster(clusterId)
		if err != nil {
			// This is a non-retryable error
			return nil, &util.Err{Err: err, Halt: true}
		}
		if cluster.Status != status {
			// This is a retryable error
			return nil, &util.Err{
				Err:  fmt.Errorf("cluster not yet in the %s state. Current state: %s", status, cluster.Status),
				Halt: false,
			}
		}
		// Success, no error
		return &cluster.Status, nil
	})

	if err != nil {
		diags.AddError("Failed to wait for cluster to enter the RUNNING state.", err.Error())
	}

	return diags
}

type ClusterStoreImpl struct {
	client *zilliz.Client
}

type ClusterStore interface {
	Get(ctx context.Context, clusterId string) (*ClusterResourceModel, error)
	Create(ctx context.Context, cluster *ClusterResourceModel) (*ClusterResourceModel, error)
	Delete(ctx context.Context, clusterId string) error
	UpgradeCuSize(ctx context.Context, clusterId string, cuSize int) error
}

func (c *ClusterStoreImpl) Get(ctx context.Context, clusterId string) (*ClusterResourceModel, error) {
	cluster, err := c.client.DescribeCluster(clusterId)
	if err != nil {
		return nil, err
	}
	return &ClusterResourceModel{
		ClusterId:   types.StringValue(cluster.ClusterId),
		Plan:        types.StringValue(string(cluster.Plan)),
		ClusterName: types.StringValue(cluster.ClusterName),
		CuSize:      types.Int64Value(cluster.CuSize),
		CuType:      types.StringValue(cluster.CuType),
		ProjectId:   types.StringValue(cluster.ProjectId),
		// Username:           types.StringValue(cluster.Username),
		// Password:           types.StringValue(cluster.Password),
		// Prompt:             types.StringValue(cluster.Prompt),
		Description:        types.StringValue(cluster.Description),
		RegionId:           types.StringValue(cluster.RegionId),
		Status:             types.StringValue(cluster.Status),
		ConnectAddress:     types.StringValue(cluster.ConnectAddress),
		PrivateLinkAddress: types.StringValue(cluster.PrivateLinkAddress),
	}, nil
}

func (c *ClusterStoreImpl) Create(ctx context.Context, cluster *ClusterResourceModel) (ret *ClusterResourceModel, err error) {
	var response *zilliz.CreateClusterResponse

	regionId := cluster.RegionId.ValueString()
	if cluster.RegionId.IsNull() || cluster.RegionId.ValueString() == "" {
		regionId = c.client.RegionId
	}

	if cluster.Plan.IsNull() || zilliz.Plan(cluster.Plan.ValueString()) == zilliz.FreePlan {
		response, err = c.client.CreateFreeCluster(zilliz.CreateServerlessClusterParams{
			RegionId:    regionId,
			ClusterName: cluster.ClusterName.ValueString(),
			ProjectId:   cluster.ProjectId.ValueString(),
		})
	} else if zilliz.Plan(cluster.Plan.ValueString()) == zilliz.ServerlessPlan {
		response, err = c.client.CreateServerlessCluster(zilliz.CreateServerlessClusterParams{
			RegionId:    regionId,
			ClusterName: cluster.ClusterName.ValueString(),
			ProjectId:   cluster.ProjectId.ValueString(),
		})
	} else if zilliz.Plan(cluster.Plan.ValueString()) == zilliz.StandardPlan || zilliz.Plan(cluster.Plan.ValueString()) == zilliz.EnterprisePlan {
		response, err = c.client.CreateDedicatedCluster(zilliz.CreateClusterParams{
			RegionId:    regionId,
			Plan:        zilliz.Plan(cluster.Plan.ValueString()),
			ClusterName: cluster.ClusterName.ValueString(),
			CUSize:      int(cluster.CuSize.ValueInt64()),
			CUType:      cluster.CuType.ValueString(),
			ProjectId:   cluster.ProjectId.ValueString(),
		})
	}

	if err != nil {
		return nil, err
	}

	ret = &ClusterResourceModel{
		ClusterId: types.StringValue(response.ClusterId),
		Username:  types.StringValue(response.Username),
		Password:  types.StringValue(response.Password),
		Prompt:    types.StringValue(response.Prompt),
	}
	return ret, nil
}

func (c *ClusterStoreImpl) Delete(ctx context.Context, clusterId string) error {
	_, err := c.client.DropCluster(clusterId)
	return err
}

func (c *ClusterStoreImpl) UpgradeCuSize(ctx context.Context, clusterId string, cuSize int) error {
	_, err := c.client.ModifyCluster(clusterId, &zilliz.ModifyClusterParams{
		CuSize: cuSize,
	})
	return err
}

type ClusterResourceModel struct {
	ClusterId          types.String   `tfsdk:"id"`
	Plan               types.String   `tfsdk:"plan"`
	ClusterName        types.String   `tfsdk:"cluster_name"`
	CuSize             types.Int64    `tfsdk:"cu_size"`
	CuType             types.String   `tfsdk:"cu_type"`
	ProjectId          types.String   `tfsdk:"project_id"`
	Username           types.String   `tfsdk:"username"`
	Password           types.String   `tfsdk:"password"`
	Prompt             types.String   `tfsdk:"prompt"`
	Description        types.String   `tfsdk:"description"`
	RegionId           types.String   `tfsdk:"region_id"`
	ClusterType        types.String   `tfsdk:"cluster_type"`
	Status             types.String   `tfsdk:"status"`
	ConnectAddress     types.String   `tfsdk:"connect_address"`
	PrivateLinkAddress types.String   `tfsdk:"private_link_address"`
	CreateTime         types.String   `tfsdk:"create_time"`
	Timeouts           timeouts.Value `tfsdk:"timeouts"`
}

// populate the ClusterResourceModel with the input which is the response from the API.
func (data *ClusterResourceModel) populate(input *ClusterResourceModel) {
	data.ClusterId = input.ClusterId
	data.Plan = input.Plan
	data.ClusterName = input.ClusterName
	data.CuSize = input.CuSize
	data.CuType = input.CuType
	data.ClusterType = input.CuType
	data.ProjectId = input.ProjectId
	// data.Username = input.Username
	// data.Password = input.Password
	// data.Prompt = input.Prompt
	data.Description = input.Description
	data.RegionId = input.RegionId
	data.Status = input.Status
	data.ConnectAddress = input.ConnectAddress
	data.PrivateLinkAddress = input.PrivateLinkAddress
	data.CreateTime = input.CreateTime
}
