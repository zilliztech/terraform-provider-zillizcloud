package cluster

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	zilliz "github.com/zilliztech/terraform-provider-zillizcloud/client"
	util "github.com/zilliztech/terraform-provider-zillizcloud/client/retry"
	customvalidator "github.com/zilliztech/terraform-provider-zillizcloud/internal/validator"
)

const (
	defaultClusterCreateTimeout time.Duration = 30 * time.Minute
	defaultClusterUpdateTimeout time.Duration = 30 * time.Minute
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ClusterResource{}
var _ resource.ResourceWithConfigure = &ClusterResource{}
var _ resource.ResourceWithImportState = &ClusterResource{}

func NewClusterResource() resource.Resource {
	return &ClusterResource{}
}

// ClusterResource defines the resource implementation.
type ClusterResource struct {
	client  *zilliz.Client
	store   ClusterStore
	timeout func() time.Duration
}

func (r *ClusterResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_cluster"
}

func (r *ClusterResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Cluster resource. If 'plan', 'cu_size' and 'cu_type' are not specified, then a free cluster is created.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "Cluster identifier",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"cluster_name": schema.StringAttribute{
				MarkdownDescription: "The name of the cluster to be created. It is a string of no more than 32 characters.",
				Required:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"project_id": schema.StringAttribute{
				MarkdownDescription: "The ID of the project where the cluster is to be created.",
				Required:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"plan": schema.StringAttribute{
				MarkdownDescription: "The plan tier of the Zilliz Cloud service. Available options are Serverless, Standard and Enterprise.",
				Optional:            true,
				Computed:            true,
				Default:             stringdefault.StaticString("Enterprise"),
				Validators: []validator.String{
					stringvalidator.OneOf("Free", "Serverless", "Standard", "Enterprise"),
				},
			},
			"cu_size": schema.Int64Attribute{
				MarkdownDescription: "The size of the CU to be used for the created cluster. It is an integer from 1 to 256.",
				Optional:            true,
				Computed:            true,
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.UseStateForUnknown(),
				},
				Default: int64default.StaticInt64(1),
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
			},
			"cu_type": schema.StringAttribute{
				MarkdownDescription: "The type of the CU used for the Zilliz Cloud cluster to be created. A compute unit (CU) is the physical resource unit for cluster deployment. Different CU types comprise varying combinations of CPU, memory, and storage. Available options are Performance-optimized, Capacity-optimized, and Extended-capacity.",
				Optional:            true,
				Computed:            true,
				Default:             stringdefault.StaticString("Performance-optimized"),
				Validators: []validator.String{
					stringvalidator.OneOf("Performance-optimized", "Capacity-optimized", "Extended-capacity"),
				},
			},
			"username": schema.StringAttribute{
				MarkdownDescription: "The name of the cluster user generated by default.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"password": schema.StringAttribute{
				MarkdownDescription: "The password of the cluster user generated by default. It will not be displayed again, so note it down and securely store it.",
				Computed:            true,
				Sensitive:           true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"prompt": schema.StringAttribute{
				MarkdownDescription: "The statement indicating that this operation succeeds.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"description": schema.StringAttribute{
				MarkdownDescription: "An optional description about the cluster.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"region_id": schema.StringAttribute{
				MarkdownDescription: "The ID of the region where the cluster exists.",
				Optional:            true,
			},
			"desired_status": schema.StringAttribute{
				MarkdownDescription: "The desired status of the cluster. Possible values are RUNNING and SUSPENDED. Defaults to RUNNING.",
				Optional:            true,
				Computed:            true,
				Default:             stringdefault.StaticString("RUNNING"),
				Validators: []validator.String{
					stringvalidator.OneOf("RUNNING", "SUSPENDED"),
				},
			},
			"status": schema.StringAttribute{
				MarkdownDescription: "The current status of the cluster. Possible values are RUNNING, SUSPENDING, SUSPENDED, and RESUMING.",
				Computed:            true,
				Optional:            true,
			},
			"connect_address": schema.StringAttribute{
				MarkdownDescription: "The public endpoint of the cluster. You can connect to the cluster using this endpoint from the public network.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"private_link_address": schema.StringAttribute{
				MarkdownDescription: "The private endpoint of the cluster. You can set up a private link to allow your VPS in the same cloud region to access your cluster.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"create_time": schema.StringAttribute{
				MarkdownDescription: "The time at which the cluster has been created.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"labels": schema.MapAttribute{
				MarkdownDescription: "A map of labels to assign to the cluster. Labels are key-value pairs that can be used to organize and categorize clusters.",
				Optional:            true,
				Computed:            true,
				ElementType:         types.StringType,
				Default: mapdefault.StaticValue(
					types.MapValueMust(types.StringType, map[string]attr.Value{}),
				),
				Validators: []validator.Map{
					customvalidator.K8sLabelMapValidator{},
				},
			},
			"replica": schema.Int64Attribute{
				MarkdownDescription: "The number of replicas for the cluster. Defaults to 1.",
				Optional:            true,
				Computed:            true,
				Default:             int64default.StaticInt64(1),
			},
		},
		Blocks: map[string]schema.Block{
			"timeouts": timeouts.Block(ctx,
				timeouts.Opts{
					Create: true,
					CreateDescription: `Timeout defaults to 5 mins. Accepts a string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) ` +
						`consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are ` +
						`"s" (seconds), "m" (minutes), "h" (hours).`,
					Update: true,
					UpdateDescription: `Timeout defaults to 5 mins. Accepts a string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) ` +
						`consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are ` +
						`"s" (seconds), "m" (minutes), "h" (hours).`,
				},
			),
		},
	}
}

func (r *ClusterResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*zilliz.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *http.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
	r.store = &ClusterStoreImpl{client: client}
}

func CloneClient(ctx context.Context, client *zilliz.Client, data *ClusterResourceModel) (*zilliz.Client, error) {
	var regionId = client.RegionId

	if data.RegionId.ValueString() != "" {
		regionId = data.RegionId.ValueString()
	}

	ctx = tflog.SetField(ctx, "RegionID", regionId)
	tflog.Info(ctx, "Clone Client...")

	return client.Clone(zilliz.WithCloudRegionId(regionId))
}

func convertTerraformMapToStringMap(terraformMap types.Map) map[string]string {
	labels := make(map[string]string)
	if !terraformMap.IsNull() && !terraformMap.IsUnknown() {
		elements := terraformMap.Elements()
		for k, v := range elements {
			if strValue, ok := v.(types.String); ok {
				labels[k] = strValue.ValueString()
			}
		}
	}
	return labels
}

func (r *ClusterResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	tflog.Info(ctx, "Create Cluster...")
	var data ClusterResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	checkPlan := func(data ClusterResourceModel) (bool, error) {

		// plan could be empty in byoc env
		if data.Plan.IsNull() || data.Plan.IsUnknown() {
			return true, nil
		}

		switch zilliz.Plan(data.Plan.ValueString()) {
		case zilliz.StandardPlan, zilliz.EnterprisePlan, zilliz.FreePlan, zilliz.ServerlessPlan:
			return true, nil
		default:
			return false, fmt.Errorf("invalid plan: %s", data.Plan.ValueString())
		}

	}

	if _, err := checkPlan(data); err != nil {
		resp.Diagnostics.AddError("Invalid plan", err.Error())
		return
	}

	var err error

	cluster, err := r.store.Create(ctx, &data)
	if err != nil {
		resp.Diagnostics.AddError("Failed to create cluster", err.Error())
		return
	}

	data.ClusterId = cluster.ClusterId
	data.Username = cluster.Username
	data.Password = cluster.Password
	data.Prompt = cluster.Prompt

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)

	// Wait for cluster to be RUNNING
	// Create() is passed a default timeout to use if no value
	// has been supplied in the Terraform configuration.
	createTimeout, diags := data.Timeouts.Create(ctx, defaultClusterCreateTimeout)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(r.waitForStatus(ctx, createTimeout, cluster.ClusterId.ValueString(), "RUNNING")...)
	if resp.Diagnostics.HasError() {
		return
	}

	cluster, err = r.store.Get(ctx, cluster.ClusterId.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Failed to get cluster", err.Error())
		return
	}

	data.populate(cluster)

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ClusterResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	tflog.Info(ctx, "Read Cluster...")
	var state ClusterResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	cluster, err := r.store.Get(ctx, state.ClusterId.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Failed to get cluster", err.Error())
		return
	}
	state.populate(cluster)

	labels, err := r.store.GetLabels(ctx, state.ClusterId.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Failed to get cluster labels", err.Error())
		return
	}

	state.Labels = labels

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (r *ClusterResource) handleCuSizeUpdate(ctx context.Context, plan, state ClusterResourceModel) diag.Diagnostics {
	var diags diag.Diagnostics

	err := r.store.UpgradeCuSize(ctx, state.ClusterId.ValueString(), int(plan.CuSize.ValueInt64()))
	if err != nil {
		diags.AddError("Failed to modify cluster", err.Error())
		return diags
	}

	diags.Append(r.waitForStatus(ctx, r.timeout(), state.ClusterId.ValueString(), "RUNNING")...)
	return diags
}

func (r *ClusterResource) handleReplicaUpdate(ctx context.Context, plan, state ClusterResourceModel) diag.Diagnostics {
	var diags diag.Diagnostics

	err := r.store.ModifyReplica(ctx, state.ClusterId.ValueString(), int(plan.Replica.ValueInt64()))
	if err != nil {
		diags.AddError("Failed to modify cluster replica", err.Error())
		return diags
	}

	diags.Append(r.waitForStatus(ctx, r.timeout(), state.ClusterId.ValueString(), "RUNNING")...)
	return diags
}

func (r *ClusterResource) handleStatusUpdate(ctx context.Context, plan, state ClusterResourceModel) diag.Diagnostics {
	var diags diag.Diagnostics

	if !plan.isStatusChangeRequired(state) {
		return diags
	}

	action := plan.getStatusAction(state)
	var err error
	var targetStatus string

	switch action {
	case StatusActionSuspend:
		err = r.store.SuspendCluster(ctx, state.ClusterId.ValueString())
		targetStatus = "SUSPENDED"
		if err != nil {
			diags.AddError("Failed to suspend cluster", err.Error())
			return diags
		}
	case StatusActionResume:
		err = r.store.ResumeCluster(ctx, state.ClusterId.ValueString())
		targetStatus = "RUNNING"
		if err != nil {
			diags.AddError("Failed to resume cluster", err.Error())
			return diags
		}
	case StatusActionNone:
		return diags
	}

	diags.Append(r.waitForStatus(ctx, r.timeout(), state.ClusterId.ValueString(), targetStatus)...)
	return diags
}

func (r *ClusterResource) handleLabelsUpdate(ctx context.Context, plan, state ClusterResourceModel) diag.Diagnostics {
	var diags diag.Diagnostics

	labels := convertTerraformMapToStringMap(plan.Labels)

	err := r.store.UpdateLabels(ctx, state.ClusterId.ValueString(), labels)
	if err != nil {
		diags.AddError("Failed to update cluster labels", err.Error())
		return diags
	}

	return diags
}

func (r *ClusterResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	tflog.Info(ctx, "Update Cluster...")

	var plan ClusterResourceModel
	var state ClusterResourceModel

	updateTimeout, timeoutDiags := plan.Timeouts.Update(ctx, defaultClusterUpdateTimeout)
	resp.Diagnostics.Append(timeoutDiags...)
	if resp.Diagnostics.HasError() {
		return
	}
	r.timeout = func() time.Duration {
		return updateTimeout
	}

	// Read Terraform plan data into the model
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read Terraform state data into the model
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	if plan.isCuSizeChanged(state) {
		resp.Diagnostics.Append(r.handleCuSizeUpdate(ctx, plan, state)...)
		if resp.Diagnostics.HasError() {
			return
		}
	}

	if plan.isReplicaChanged(state) {
		resp.Diagnostics.Append(r.handleReplicaUpdate(ctx, plan, state)...)
		if resp.Diagnostics.HasError() {
			return
		}
	}

	resp.Diagnostics.Append(r.handleStatusUpdate(ctx, plan, state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	if plan.isLabelsChanged(state) {
		resp.Diagnostics.Append(r.handleLabelsUpdate(ctx, plan, state)...)
		if resp.Diagnostics.HasError() {
			return
		}
		state.Labels = plan.Labels
	}

	cluster, err := r.store.Get(ctx, state.ClusterId.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Failed to get cluster", err.Error())
		return
	}

	state.populate(cluster)
	state.Timeouts = plan.Timeouts

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (r *ClusterResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	tflog.Info(ctx, "Delete Cluster...")
	var data ClusterResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.store.Delete(ctx, data.ClusterId.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Failed to drop cluster", err.Error())
		return
	}
}

func (r *ClusterResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	idParts := strings.Split(req.ID, ",")

	if len(idParts) != 2 || idParts[0] == "" || idParts[1] == "" {
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			fmt.Sprintf("Expected import identifier with format: clusterId,regionId. Got: %q", req.ID),
		)
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), idParts[0])...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("region_id"), idParts[1])...)
}

func (r *ClusterResource) waitForStatus(ctx context.Context, timeout time.Duration, clusterId string, status string) diag.Diagnostics {
	var diags diag.Diagnostics

	_, err := util.Poll(ctx, timeout, func() (*string, *util.Err) {
		cluster, err := r.client.DescribeCluster(clusterId)
		if err != nil {
			// This is a non-retryable error
			return nil, &util.Err{Err: err, Halt: true}
		}
		if cluster.Status != status {
			// This is a retryable error
			return nil, &util.Err{
				Err:  fmt.Errorf("cluster not yet in the %s state. Current state: %s", status, cluster.Status),
				Halt: false,
			}
		}
		// Success, no error
		return &cluster.Status, nil
	})

	if err != nil {
		diags.AddError("Failed to wait for cluster to enter the RUNNING state.", err.Error())
	}

	return diags
}
